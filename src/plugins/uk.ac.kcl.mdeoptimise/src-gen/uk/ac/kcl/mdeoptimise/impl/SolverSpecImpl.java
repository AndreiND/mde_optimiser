/**
 * generated by Xtext 2.14.0
 */
package uk.ac.kcl.mdeoptimise.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.kcl.mdeoptimise.MdeoptimisePackage;
import uk.ac.kcl.mdeoptimise.OptimisationSpec;
import uk.ac.kcl.mdeoptimise.SolverSpec;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Solver Spec</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.mdeoptimise.impl.SolverSpecImpl#getOptimisation <em>Optimisation</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SolverSpecImpl extends MinimalEObjectImpl.Container implements SolverSpec
{
  /**
   * The cached value of the '{@link #getOptimisation() <em>Optimisation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOptimisation()
   * @generated
   * @ordered
   */
  protected OptimisationSpec optimisation;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SolverSpecImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MdeoptimisePackage.Literals.SOLVER_SPEC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptimisationSpec getOptimisation()
  {
    return optimisation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOptimisation(OptimisationSpec newOptimisation, NotificationChain msgs)
  {
    OptimisationSpec oldOptimisation = optimisation;
    optimisation = newOptimisation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MdeoptimisePackage.SOLVER_SPEC__OPTIMISATION, oldOptimisation, newOptimisation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOptimisation(OptimisationSpec newOptimisation)
  {
    if (newOptimisation != optimisation)
    {
      NotificationChain msgs = null;
      if (optimisation != null)
        msgs = ((InternalEObject)optimisation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MdeoptimisePackage.SOLVER_SPEC__OPTIMISATION, null, msgs);
      if (newOptimisation != null)
        msgs = ((InternalEObject)newOptimisation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MdeoptimisePackage.SOLVER_SPEC__OPTIMISATION, null, msgs);
      msgs = basicSetOptimisation(newOptimisation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdeoptimisePackage.SOLVER_SPEC__OPTIMISATION, newOptimisation, newOptimisation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MdeoptimisePackage.SOLVER_SPEC__OPTIMISATION:
        return basicSetOptimisation(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MdeoptimisePackage.SOLVER_SPEC__OPTIMISATION:
        return getOptimisation();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MdeoptimisePackage.SOLVER_SPEC__OPTIMISATION:
        setOptimisation((OptimisationSpec)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MdeoptimisePackage.SOLVER_SPEC__OPTIMISATION:
        setOptimisation((OptimisationSpec)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MdeoptimisePackage.SOLVER_SPEC__OPTIMISATION:
        return optimisation != null;
    }
    return super.eIsSet(featureID);
  }

} //SolverSpecImpl
